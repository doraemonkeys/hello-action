name: Rust Build and Release

on:
  push:
    tags:
      - "v*" # Push events to matching v*, like v1.0.0, v20.15.10, etc.

env:
  RUST_BACKTRACE: full
  RUST_PROJECT_NAME1: hello-action
  RUST_PROJECT_NAME2: hello_action

jobs:
  build:
    name: Build and Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: your_project_name-macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: your_project_name-windows.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename & Move Binary
        run: |
          mv target/${{ matrix.target }}/release/${{ env.RUST_PROJECT_NAME2 }} ${{ matrix.asset_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset MacOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/your_project_name-macos
          asset_name: your_project_name-macos
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/your_project_name-windows.exe
          asset_name: your_project_name-windows.exe
          asset_content_type: application/octet-stream
